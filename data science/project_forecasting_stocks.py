# -*- coding: utf-8 -*-
"""Project - Forecasting Stocks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HEAZbkIxalr_oksmSO9XD-_07z0DDkA3

# **Importing Packages and performing Data Analysis**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.holtwinters import SimpleExpSmoothing
from statsmodels.tsa.holtwinters import Holt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import statsmodels.graphics.tsaplots as tsap
from scipy import stats

stock=pd.read_csv("https://raw.githubusercontent.com/sfarhan79/datasets/main/python%20datasets/csv/reliance%20stocks.csv")
stock.head()

stock1=stock.copy()
stock1.head()

stock1.Date=pd.to_datetime(stock1.Date,errors="ignore")
stock1

stock1.info()

stock1.isna().sum()

stock1.dropna(inplace=True)

stock1.shape

stock1.size

stock1.info()

stock1['Month'] = pd.to_datetime(stock1['Date']).dt.month
stock1['Year'] = pd.to_datetime(stock1['Date']).dt.year
stock1.head()

stock2 = stock1.copy()
stock2["Month_Name"] = pd.to_datetime(stock2["Date"]).dt.strftime("%B")
stock2

stock3=stock2.drop(columns=["Date"])
stock3.head()

stock3.isnull().sum()

stock3.describe()

"""# **Exploratory Data Analysis (EDA)**"""

# Outliers
plt.figure(figsize=(10, 4))
sns.boxplot(data=stock3.iloc[:, 0:6])
plt.title("Outliers",color="red")
plt.show()

# Outliers (Z score)
z_scores = stats.zscore(stock3.iloc[:, 0:6])
abs_z_scores = np.abs(z_scores)
filtered_entries = (abs_z_scores < 3).all(axis=1)
stock3 = stock3[filtered_entries]

plt.figure(figsize=(10, 4))
sns.boxplot(data=stock3.iloc[:, 0:6])
plt.title("Boxplot of Stock Data after Removing Outliers",color="red")
plt.show()

# Correlation
plt.figure(figsize=(10, 4))
sns.heatmap(stock3.iloc[:, 0:6].corr(), annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Correlation Matrix of Stock Data")
plt.show()

# Highest stock by Volume
stock3.groupby('Month_Name')['Volume'].max().round(2)

# Best Opening by Month
stock3.groupby('Month_Name')['Open'].max().round(2)

# Lowest Close
stock3.groupby('Year')['Close'].min().round(2)

# Best Month each Year
for year in stock3['Year'].unique():
  best_month = stock3[stock3['Year'] == year].groupby('Month_Name')['Close'].mean().idxmax()
  best_value = stock3[stock3['Year'] == year].groupby('Month_Name')['Close'].mean().max().round(2)
  print(f"{year}: Best month is {best_month} with average closing price of {best_value}")

# Best Adjusted close
print("Best Adjusted Close:", stock3["Adj Close"].max().round(2))

# Best Close by Volume
best_volume_month = stock3.groupby('Year')['Volume'].mean().idxmax()
best_volume_close = stock3[stock3['Year'] == best_volume_month]['Close'].mean().round(2)
print(f"Best Close by Volume: {best_volume_close}")

# Average Stock Closing over Time
sns.lineplot(data=stock3, x="Year", y="Close", hue="Month_Name", palette="hls")
plt.title("Average Stock Closing over Time",color="red")
plt.show()

# Open VS Close
plt.figure(figsize=(10, 6))
plt.scatter(stock3.Open, stock3.Close)
plt.xlabel("Opening Price")
plt.ylabel("Closing Price")
plt.title("Reliance Stock Open vs Close Price",color="red")
plt.show()

# Stock Volume
plt.figure(figsize=(10, 6))
plt.hist(stock3.Volume, bins=10)
plt.xlabel("Volume")
plt.ylabel("Frequency")
plt.title("Reliance Stock Volume Distribution",color="red")
plt.show()

# High Price over the time
sns.barplot(x=stock3['Year'], y=stock3['High'],hue=stock3['Year'],palette="inferno")
plt.xlabel('Time')
plt.ylabel('High Price')
plt.xticks(rotation=90)
plt.title('Reliance Stock High Prices Over Time',color="red")
plt.show()

# Stocks Price Variables

# List of colors for the pie chart
colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']

# List of labels for the pie chart
labels = ['Open', 'High', 'Low', 'Close']

# List of values for the pie chart
values = [stock3['Open'].mean(), stock3['High'].mean(), stock3['Low'].mean(), stock3['Close'].mean()]

# Plotting pie chart with explode
plt.pie(values, labels=labels, autopct='%1.1f%%', colors=colors, explode=[0.05, 0.05, 0.05, 0.05])
plt.title('Average Stock Price',color="red")
plt.show()

"""# **Model Building**

# KNN Model
"""

from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from math import sqrt

# Load the dataset
stock = pd.read_csv("https://raw.githubusercontent.com/sfarhan79/datasets/main/python%20datasets/csv/reliance%20stocks.csv")

# Preprocess the data
stock.dropna(inplace=True)

# Create features and target variables
features = stock[['Open', 'High', 'Low', 'Volume']]
target = stock['Close']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create a KNN model
knn = KNeighborsRegressor(n_neighbors=3)

# Train the model
knn.fit(X_train, y_train)

# Make predictions
y_pred = knn.predict(X_test)

# Model Evaluation
knn_accuracy = knn.score(X_test, y_test)
knn_precision = knn.score(X_test, y_test)
rmse = sqrt(mean_squared_error(y_test, y_pred))

print("Accuracy:", knn_accuracy*100,"%")
print("Precision:", knn_precision*100)
print("RMSE:", rmse)

# Forecast stock price for next 30 days
last_30_days = stock[-30:]
last_30_days_features = last_30_days[['Open', 'High', 'Low', 'Volume']]
last_30_days_features_scaled = scaler.transform(last_30_days_features)
next_30_days_predicted_prices = knn.predict(last_30_days_features_scaled)

# Plot the predicted stock prices
plt.figure(figsize=(30, 5))
plt.plot(last_30_days['Date'], next_30_days_predicted_prices, label='Predicted')
plt.xlabel('Date', fontsize=8)
plt.ylabel('Close Price')
plt.title('Reliance Stock Price Prediction')
plt.legend()
plt.show()

"""# Decision Tree Model"""

# Load the dataset
stock = pd.read_csv("https://raw.githubusercontent.com/sfarhan79/datasets/main/python%20datasets/csv/reliance%20stocks.csv")

# Preprocess the data
stock.dropna(inplace=True)

# Create features and target variables
features = stock[['Open', 'High', 'Low', 'Volume']]
target = stock['Close']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

# Create a Decision Tree model
from sklearn.tree import DecisionTreeRegressor
model = DecisionTreeRegressor()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Model Evaluation
dt_accuracy = model.score(X_test, y_test)
dt_precision = model.score(X_test, y_test)
rmse = sqrt(mean_squared_error(y_test, y_pred))

print("Accuracy:", dt_accuracy*100,"%")
print("Precision:", dt_precision*100)
print("RMSE:", rmse)

# Forecast stock price for next 30 days
last_30_days = stock[-30:]
last_30_days_features = last_30_days[['Open', 'High', 'Low', 'Volume']]
next_30_days_predicted_prices = model.predict(last_30_days_features)

# Plot the predicted stock prices
plt.figure(figsize=(30, 5))
plt.plot(last_30_days['Date'], next_30_days_predicted_prices, label='Predicted')
plt.xlabel('Date', fontsize=8)
plt.ylabel('Close Price')
plt.title('Reliance Stock Price Prediction')
plt.legend()
plt.show()

data={"Model":pd.Series(["KNN","Decision Tree"]),"Accuracy":pd.Series([knn_accuracy*100,dt_accuracy*100]),"Precision":pd.Series([knn_precision*100,dt_precision*100])}
value_table=pd.DataFrame(data)
value_table.sort_values("Accuracy")

tsap.plot_acf(stock3["Close"],lags=12)
tsap.plot_pacf(stock3["Close"],lags=12)

"""**Inference:** *Upon review, we conclude that KNN model fell short in precision (99.93) and accuracy (99.93%) and Decision Tree Model is more preferrable for referring stock prices for **Next 30 Days** as it is precise at 99.96 and has a forecasting accuracy of 99.96%.*

# **Forecast for Next 365 Days (A Year)**

# Split the Last Year into a Test set to Forecast for next 1 year.
"""

# **KNN Model**
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.33, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

knn1 = KNeighborsRegressor(n_neighbors=3)
knn1.fit(X_train, y_train)
y_pred = knn1.predict(X_test)

# Model Evaluation
knn1_accuracy = knn1.score(X_test, y_test)
knn1_precision = knn1.score(X_test, y_test)
rmse = sqrt(mean_squared_error(y_test, y_pred))

# Forecast stock price for next 365 days
last_365_days = stock[-365:]
last_365_days_features = last_365_days[['Open', 'High', 'Low', 'Volume']]
last_365_days_features_scaled = scaler.transform(last_365_days_features)
next_365_days_predicted_prices = knn1.predict(last_365_days_features_scaled)

# Plot the predicted stock prices
plt.figure(figsize=(30, 5))
plt.plot(last_365_days['Date'], next_365_days_predicted_prices, label='Predicted')
plt.xlabel('Date', fontsize=8)
plt.ylabel('Close Price')
plt.title('Reliance Stock Price Prediction for Next Year (KNN)')
plt.legend()
plt.show()

# **Decision Tree Model**
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.33, random_state=42)

model1 = DecisionTreeRegressor()
model1.fit(X_train, y_train)
y_pred = model1.predict(X_test)

# Model Evaluation
dt1_accuracy = model1.score(X_test, y_test)
dt1_precision = model1.score(X_test, y_test)
rmse = sqrt(mean_squared_error(y_test, y_pred))

# Forecast stock price for next 365 days
last_365_days = stock[-365:]
last_365_days_features = last_365_days[['Open', 'High', 'Low', 'Volume']]
next_365_days_predicted_prices = model1.predict(last_365_days_features)

# Plot the predicted stock prices
plt.figure(figsize=(30, 5))
plt.plot(last_365_days['Date'], next_365_days_predicted_prices, label='Predicted')
plt.xlabel('Date', fontsize=8)
plt.ylabel('Close Price')
plt.title('Reliance Stock Price Prediction for Next Year (Decision Tree)')
plt.legend()
plt.show()

"""# Short-term Trends & Long-term Trends"""

# **Short Term Trend**
# Calculating 10-day moving average
stock3['10_days_MA'] = stock3['Close'].rolling(window=10).mean()

# Plotting Closing price and the 10-day moving average
plt.figure(figsize=(10, 6))
plt.plot(stock3['Close'], label='Close Price')
plt.plot(stock3['10_days_MA'], label='10-day Moving Average')
plt.xlabel('Time')
plt.ylabel('Close Price')
plt.title('Reliance Stock: Short Term Trend (10-day Moving Average)')
plt.legend()
plt.show()

# **Long Term Trend**
# Calculating 50-day moving average
stock3['50_days_MA'] = stock3['Close'].rolling(window=50).mean()

# Plotting Closing price and the 50-day moving average
plt.figure(figsize=(10, 6))
plt.plot(stock3['Close'], label='Close Price')
plt.plot(stock3['50_days_MA'], label='50-day Moving Average')
plt.xlabel('Time')
plt.ylabel('Close Price')
plt.title('Reliance Stock: Long Term Trend (50-day Moving Average)')
plt.legend()
plt.show()

"""# Impact from External Factors or any Big External Events"""

# Loading stock data
stock_data = pd.read_csv("https://raw.githubusercontent.com/sfarhan79/datasets/main/python%20datasets/csv/reliance%20stocks.csv")

# Selecting relevant columns
stock_data = stock_data[["Date", "Close"]]
stock_data['Month'] = pd.to_datetime(stock_data['Date']).dt.month
stock_data['Year'] = pd.to_datetime(stock_data['Date']).dt.year

# Set the date as Index
stock_data.set_index("Date", inplace=True)

# Calculation of daily returns
stock_data["Daily_Returns"] = stock_data["Close"].pct_change()

# Defining external events
external_events = {
    "2020-03-24": "COVID-19 pandemic declared",
    "2022-02-24": "Russia-Ukraine war begins",
}

# Adding the external events to stock data
stock_data["External_Events"] = np.nan
for date, event in external_events.items():
    stock_data.loc[date, "External_Events"] = event

# Calculation of average daily return for each external event
for event in external_events.values():
    event_returns = stock_data[stock_data["External_Events"] == event]["Daily_Returns"].mean()
    print(f"Average daily return during {event}: {event_returns:.4f}")

# Plotting stock price and the external events
plt.figure(figsize=(30, 4))
plt.plot(stock_data["Close"], label="Close Price")
for date, event in external_events.items():
    plt.axvline(x=date, color="red", linestyle="--", label=event)
plt.ylabel("Close Price")
plt.ylabel("Date")
plt.title("Reliance Stock: Impact of External Events")
plt.legend()
plt.show()

data1={"Model":pd.Series(["KNN","Decision Tree"]),"Accuracy":pd.Series([knn1_accuracy*100,dt1_accuracy*100]),"Precision":pd.Series([knn1_precision*100,dt1_precision*100])}
value_table=pd.DataFrame(data1)
value_table.sort_values("Accuracy")

"""**Inference:** *Yet again, we can conlude Decision Tree as the preferred model over KNN for referring stock prices for **Next 365 Days (1 Year)** as it has a precision of 99.96 and accuracy of 99.96%, whereas, KNN has 99.94 precision and 99.94% accuracy.*

# **Deployment**
"""

!pip install streamlit
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor

# Load the dataset
stock = pd.read_csv("https://raw.githubusercontent.com/sfarhan79/datasets/main/python%20datasets/csv/reliance%20stocks.csv")

# Preprocess the data
stock.dropna(inplace=True)

# Create features and target variables
features = stock[['Open', 'High', 'Low', 'Volume']]
target = stock['Close']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create a KNN model
knn = KNeighborsRegressor(n_neighbors=3)

# Train the model
knn.fit(X_train, y_train)

# Create a Decision Tree model
model = DecisionTreeRegressor()

# Train the model
model.fit(X_train, y_train)

# Set the title of the Streamlit app
st.title('Reliance Stock Price Prediction')

# Create a selectbox for the user to choose the model
model_selection = st.selectbox('Select a model', ('KNN', 'Decision Tree'))

# Create a text input for the user to enter the date
date_input = st.text_input('Enter a date (YYYY-MM-DD)', '2023-08-01')

# Convert the date input to a datetime object
date = pd.to_datetime(date_input)

# Get the last 30 days of data
last_30_days = stock[-30:]

# Get the last 365 days of data
last_365_days = stock[-365:]

# Extract the features from the last 30 days of data
last_30_days_features = last_30_days[['Open', 'High', 'Low', 'Volume']]

# Extract the features from the last 365 days of data
last_365_days_features = last_365_days[['Open', 'High', 'Low', 'Volume']]

# Standardize the features
last_30_days_features_scaled = scaler.transform(last_30_days_features)
last_365_days_features_scaled = scaler.transform(last_365_days_features)

# Predict the next 30 days of stock prices
if model_selection == 'KNN':
    next_30_days_predicted_prices = knn.predict(last_30_days_features_scaled)
elif model_selection == 'Decision Tree':
    next_30_days_predicted_prices = model.predict(last_30_days_features_scaled)

# Predict the next 365 days of stock prices
if model_selection == 'KNN':
    next_365_days_predicted_prices = knn.predict(last_365_days_features_scaled)
elif model_selection == 'Decision Tree':
    next_365_days_predicted_prices = model.predict(last_365_days_features_scaled)

# Plot the predicted stock prices for the next 30 days
plt.figure(figsize=(30, 5))
plt.plot(last_30_days['Date'], next_30_days_predicted_prices, label='Predicted')
plt.xlabel('Date', fontsize=8)
plt.ylabel('Close Price')
plt.title('Reliance Stock Price Prediction for Next 30 Days')
plt.legend()
st.pyplot()

# Plot the predicted stock prices for the next 365 days
plt.figure(figsize=(30, 5))
plt.plot(last_365_days['Date'], next_365_days_predicted_prices, label='Predicted')
plt.xlabel('Date', fontsize=8)
plt.ylabel('Close Price')
plt.title('Reliance Stock Price Prediction for Next 365 Days')
plt.legend()
st.pyplot()